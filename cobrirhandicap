<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Handicap Estimado</title>
  <style>
    .side-by-side {
      display: flex;
      justify-content: space-between;
      padding: 20px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    table, th, td {
      border: 1px solid black;
    }

    th, td {
      padding: 10px;
      text-align: center;
    }
  </style>
  <script>
async function calcularHandicap() {
  try {
    // Definição do intervalo de datas
    const startDate = '01.01'; // Exemplo de data de início
    const endDate = '31.12';   // Exemplo de data de fim

    // Buscar as médias de pontos dos times
    const resposta1 = await fetch(`/team-averages?start_date=${startDate}&end_date=${endDate}`);
    const averages = await resposta1.json();

    if (!averages || averages.length === 0) {
      document.getElementById('dados').innerHTML = "<tr><td colspan='9'>Nenhum dado encontrado.</td></tr>";
      return;
    }

    // Buscar os últimos jogos dos times
    const resposta2 = await fetch('/ultimosjogos4');
    const jogos = await resposta2.json();

    // Buscar os dados de confrontos diretos
    const resposta3 = await fetch(`/gamestats`);
    const gamestats = await resposta3.json();

    const rows = await Promise.all(averages.map(async (avg) => {
      const confrontoDireto = gamestats.find(confronto => confronto.time_home === avg.time_home && confronto.time_away === avg.time_away);

      const avgDifferenceHome = confrontoDireto ? parseFloat(confrontoDireto.avg_difference_home) : 0;
      const avgDifferenceAway = confrontoDireto ? parseFloat(confrontoDireto.avg_difference_away) : 0;

      let avgDiffConfrontoDireto = avgDifferenceHome > avgDifferenceAway ? avgDifferenceHome : -avgDifferenceAway;

      const jogo = jogos.find(jogo => jogo.time_home === avg.time_home && jogo.time_away === avg.time_away);
      if (!jogo) return null;

      const mediaTimeAEmCasa = parseFloat(avg.home_avg) || 0;
      const mediaTimeBEmFora = parseFloat(avg.away_avg) || 0;

      const homeWinAvg = parseFloat(jogo.home_last_games.win_avg) || 0;
      const awayWinAvg = parseFloat(jogo.away_last_games.win_avg) || 0;

      const diferencaTimeAEmCasa = homeWinAvg;
      const diferencaTimeBEmFora = awayWinAvg;

      const handicap = (mediaTimeAEmCasa - mediaTimeBEmFora) +
                       (diferencaTimeAEmCasa - diferencaTimeBEmFora) +
                       avgDiffConfrontoDireto;

      // Definição do time a ser consultado no banco
      const timeParaConsulta = handicap < 0 ? avg.time_home : avg.time_away;
      const campoLocal = handicap < 0 ? 'home' : 'away';

      // Converter o handicap para valor absoluto para a comparação
      const handicapAbsoluto = Math.abs(handicap);

      // Buscar os últimos 10 jogos do time correspondente
      const response4 = await fetch(`/ultimos-10-jogos?team=${timeParaConsulta}&location=${campoLocal}`);
      const ultimosJogos = await response4.json();

      // Contar quantas vezes perdeu por uma margem maior que o handicap estimado
      const derrotasPorMaisQueHandicap = ultimosJogos.filter(jogo => {
        const diferencaPontos = Math.abs(jogo.home_score - jogo.away_score);
        return jogo.winner !== timeParaConsulta && diferencaPontos > handicapAbsoluto;
      }).length;

      return {
        time_home: avg.time_home,
        time_away: avg.time_away,
        mediaTimeAEmCasa: mediaTimeAEmCasa.toFixed(2),
        mediaTimeBEmFora: mediaTimeBEmFora.toFixed(2),
        diferencaTimeAEmCasa: diferencaTimeAEmCasa.toFixed(2),
        diferencaTimeBEmFora: diferencaTimeBEmFora.toFixed(2),
        vantagemConfrontoDireto: avgDiffConfrontoDireto.toFixed(2),
        handicap: handicap.toFixed(2),
        time_consultado: timeParaConsulta,
        jogos_perdidos_handicap: derrotasPorMaisQueHandicap
      };
    })).then(resultados => resultados.filter(row => row !== null));

    // Atualizar a tabela com os dados
    const dadosElement = document.getElementById('dados');
    dadosElement.innerHTML = rows.map(row => {
      return `
        <tr>
          <td>${row.time_home}</td>
          <td>${row.time_away}</td>
          <td>${row.mediaTimeAEmCasa}</td>
          <td>${row.mediaTimeBEmFora}</td>
          <td>${row.diferencaTimeAEmCasa}</td>
          <td>${row.diferencaTimeBEmFora}</td>
          <td>${row.vantagemConfrontoDireto}</td>
          <td>${row.handicap}</td>
          <td>${row.jogos_perdidos_handicap}</td>
        </tr>
      `;
    }).join('');

  } catch (error) {
    console.error("Erro ao calcular o handicap:", error);
    document.getElementById('dados').innerHTML = "<tr><td colspan='9'>Erro ao calcular o Handicap.</td></tr>";
  }
}


// Executar automaticamente quando a página carregar
window.onload = calcularHandicap;

  </script>
</head>
<body>
  <h1>Handicap Estimado</h1>

  <div class="side-by-side">
    <table>
      <thead>
        <tr>
          <th>Casa</th>
          <th>Visitante</th>
          <th>M.P. Casa</th>
          <th>M.P. Visitante</th>
          <th>M.D.Vit Casa</th>
          <th>M.D.Vit Visitante</th>
          <th>M. Confronto</th>
          <th>handicap</th>
          <th>cobrir o handicap</th>
        </tr>
      </thead>
      <tbody id="dados">
        <!-- As linhas serão inseridas aqui dinamicamente -->
      </tbody>
    </table>
  </div>
</body>
</html>
